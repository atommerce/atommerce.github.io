<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:webfeeds="http://webfeeds.org/rss/1.0">
    <channel>
        <title>Atommerce Tech Blog</title>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <link>http://localhost:4000/</link>
        <description>Atommerce Technical Blog</description>
        <pubDate>Mon, 08 Jul 2019 00:45:41 +0900</pubDate>
        <webfeeds:icon>http://localhost:4000/assets/img/triangle.png</webfeeds:icon>
        
        <item>
            
            <title>슬랙에서 웹훅 연동하기</title>
            <link>http://localhost:4000/2019/07/08/tonyji_slack-webhook.html</link>
            <guid isPermaLink="false">/2019/07/08/tonyji_slack-webhook.html</guid>
            <description>&lt;p&gt;스타트업에서 신속하고 효율적인 커뮤니케이션은 아주 중요한 요소 중 하나입니다. &lt;br /&gt;&lt;br /&gt;
기업에서 활용할 수 있는 많은 커뮤니케이션 툴 중에서 슬랙은 현재 많은 스타트업에서 활용 중인 좋은 서비스로 기본적으로 무료로 제공됩니다. 다만, 몇 가지 프리미엄 기능을 사용하기 위해서는 유료 서비스를 신청하셔야 합니다. 무료 서비스는 주고 받는 메시지의 최대 기록이 일정 수(현재 10,000개)로 제한되어 그 수를 넘게 되면 과거의 메시지들은 조회할 수 없게 됩니다. 또한, 파일 공유를 위한 스토리지 용량이 제한(현재는 5G)되는데 이 제한을 넘게되면 과거의 파일부터 기록에서 삭제됩니다. 이 특성만 고려한다면 무료로도 충분히 잘 활용할 수 있습니다.&lt;br /&gt;&lt;br /&gt;
개인적으로 슬랙은 즉각적이거나 혹은 일정 기간동안만 유지되는 커뮤니케이션을 위해 활용하고, 기록으로 남기는 부분은 이메일, 지라(Jira), 트렐로(Trello), 구글 드라이브등의 다른 서비스들을 활용하는게 좋다고 생각합니다&lt;br /&gt;&lt;br /&gt;
이번에 공유해 드릴 내용은 슬랙에서 제공하는 API 중에 웹훅을 활용한 기능입니다. 이 기능은 외부 시스템에서 특정 작업을 실행한 후 이를 슬랙을 통해 공유할 수 있도록 합니다.&lt;br /&gt;&lt;br /&gt;&lt;!--more--&gt;
예를 들어 볼까요? 매일 아침 10시에 전날 서비스 가입자, 리텐션 등 각종 통계 정보를 슬랙을 통해 공유한다면 어떨까요? 혹은 서비스에 크리티컬한 오류가 발생할 경우, 슬랙에 알림을 보내는 것도 유용하겠죠?&lt;br /&gt;&lt;br /&gt;
이처럼 슬랙의 웹훅 기능은 다양하게 활용할 수 있습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Webhook(웹훅)이란? 서버에서 특정 작업이 수행 되었을 때, 해당 작업이 수행되었음을 HTTP POST 방식으로 알리는 개념을 말합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
이제부터 본격적으로 슬랙의 웹훅 기능을 구현하도록 해보겠습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저, 다음 링크를 통해서 슬랙 API 웹사이트에 접속합니다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://api.slack.com/incoming-webhooks&quot; target=&quot;_blank&quot;&gt;https://api.slack.com/incoming-webhooks&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
화면 중앙의 “Create your Slack app” 버튼을 클릭해서 슬랙 앱을 생성합니다. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-1.png&quot; alt=&quot;Slack&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런 다음 원하는 이름으로 “App Name”을 기술하고, “Development Slack Workspace”에 팀이 사용중인 workspace를 선택합니다. 기존에 사용하는 workspace가 없는 경우 새로 생성한 후에 작업을 계속하면 됩니다. &lt;br /&gt;&lt;br /&gt;
기입이 다 완료되면 하단의 “Create App” 버튼을 클릭합니다.&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-2.png&quot; alt=&quot;Slack&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
이후 슬랙을 위한 기능을 추가하는데 여기에서 “Incoming Webhooks”를 선택하고 하단의 “Save Changes”를 클릭합니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-3.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹훅 설정화면에서 “Activate Imcoming Webhook”를 “On” 상태로 바꿉니다. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-4.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;맨 하단의 “Add New Webhook to Workspace”를 클릭하면, 다음과 같이 알림을 받을 채널을 선택하는 화면이 뜹니다. 원하는 채널을 선택한 후 “Install” 버튼을 클릭하면 해당 채널로 웹훅 알림이 전달됩니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-5.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자, 이제 모든 설정을 완료했습니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;화면 중앙의 “Sample curl request to post to a channel”에 나온 curl 실행 명령을 복사합니다. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-6.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
 터미널에서 복사한 curl 명령을 붙여넣기해서 실행해보면 지정한 채널로 “Hello, World!”라는 텍스트가 발송되는 것을 확인하실 수 있습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-7.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
우리는 “# general” 채널로 텍스트를 발송했으므로 아래와 같이 “# general” 채널로 “Hello, World!”라는 텍스트가 올라온 것을 볼 수 있습니다. 발송자는 맨 처음에 “App Name”으로 지정했던 “Super Service”로 나타납니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-8.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
이제 슬랙 웹훅을 위한 모든 준비가 끝났습니다. &lt;br /&gt;
웹훅 설정 화면에서 아래 화면과 같이 “Webhook URL”에서 Copy 버튼을 클릭해서 복사해 두세요.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/slack-webhook/screenshot-9.png&quot; alt=&quot;Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 남은 작업은 여러분이 원하는 정보를 생성하는 데몬 프로그램을 구현해서 원하는 주기로 위에서 복사하셨던 “Webhook URL”로 POST 방식으로 전송하기만 하면 됩니다. 참 쉽죠^^&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;슬랙의 웹훅 기능은 정말 유용한 기능이에요. 아직 활용하지 않았던 스타트업이 있으면 적극적으로 활용해 보세요.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;세상의 모든 스타트업을 응원합니다!&lt;br /&gt;&lt;br /&gt;
감사합니다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 08 Jul 2019 00:00:00 +0900</pubDate>
        </item>
        
        <item>
            
            <title>MySQL에서 이모지 사용하기</title>
            <link>http://localhost:4000/2019/07/07/tonyji_utf8mb4.html</link>
            <guid isPermaLink="false">/2019/07/07/tonyji_utf8mb4.html</guid>
            <description>&lt;h3 id=&quot;부제-mysql에서-완전한-유니코드-지원-방법&quot;&gt;[부제: MySQL에서 완전한 유니코드 지원 방법]&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
올해 초 각고의 노력 끝에 아토머스의 오랜 숙원 사업인 ‘마인드카페 프로’를 런칭하게 되었습니다.&lt;br /&gt;
마인드카페 프로는 기존의 오프라인 대면 심리 상담 방식을 온라인 익명 채팅 및 전화상담으로 구현한 서비스입니다.&lt;br /&gt;
오늘은 마인드카페 프로의 기능 중 채팅 상담을 구현하면서 겪은 이슈인 이모지 사용을 위한 MySQL 인코딩에 대해 말씀드리려고 합니다.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;사실 필자는 오랜 기간동안 백엔드 프로그래밍을 해왔는데, MySQL에서 다국어 지원을 위해서는 ‘utf8’ 을 사용해야 한다고 알고 있었고 항상 기본 인코딩으로 ‘utf8’을 사용해 왔습니다. 그런데, 채팅에서 이모지 사용을 테스트하던 중 이모지가 제대로 표현되지 않는 오류를 발견하고 이를 분석하던 중 새로운 사실을 알게 되어 공유드리려고 합니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;본론에 들어가기 전에 우선 인코딩에 대해서 간략하게 정리해 보도록 하겠습니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;히스토리&quot;&gt;히스토리&lt;/h4&gt;

&lt;p&gt;컴퓨터에서 문자를 표시하기 위해 각 문자에 수치화된 코드값을 부여한 것을 ‘문자 집합’이라고 합니다.
그리고, 이 문자 집합을 컴퓨터가 이해할 수 있도록 비트 단위로 변환하는 작업을 ‘인코딩’이라고 합니다.&lt;/p&gt;

&lt;p&gt;컴퓨터가 발명된 후, 각 나라마다 자국의 언어에 맞는 문자 집합을 정의해서 사용해왔는데, 이러다 보니 인코딩 방식이 서로 달라서 여러 국가의 언어를 동시에 표시하는데 문제가 발생하게 됩니다.
&lt;br /&gt;이에 따라, 전 세계 모든 문자에 대한 표준 문자 집합인 ‘유니코드’가 탄생하게 되었습니다. &lt;br /&gt;유니코드에 대한 자세한 설명은 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C&quot;&gt;위키백과의 설명&lt;/a&gt;을 참고하세요.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;유니코드의 주요 인코딩 방식에는 UTF-8, UTF-16, UTF-32등이 있는데, 이 중 UTF-16은 기본 다국어 평면(BMP, Basic multilingual plane)에 속하는 기본 문자들은 16비트(즉, 2바이트)로 그 이상의 문자는 32비트로 인코딩하고, UTF-32는 모든 문자를 32비트(즉, 4바이트)의 고정된 크기로 인코딩하도록 정의되어 있습니다. &lt;br /&gt;
그 중, UTF-8은 문자에 따라 8비트부터 32비트(즉, 1바이트~4바이트)까지 표현되는 가변 길이 문자 인코딩 방식으로 ASCII 코드와 호환되는 동시에 유니코드를 표현할 수 있어 가장 많이 사용된다고 합니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면, MySQL ‘utf8’이라는 인코딩이 무엇을 의미하는지 부터 알아보겠습니다.&lt;br /&gt;
MySQL에서 유니코드에 대한 지원은 2003년에 발표된 &lt;a href=&quot;http://mysql.localhost.net.ar/doc/refman/4.1/en/news-4-1-0.html&quot;&gt;MySQL 4.1 버전&lt;/a&gt;부터이며, 위에서 설명드린 유니코드의 표준 인코딩 방식 중 UTF-8 방식을 ‘utf8’이라는 명칭으로 지원하면서 시작되었습니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데, 문제는 현재의 UTF-8 표준인 &lt;a href=&quot;https://tools.ietf.org/html/rfc3629&quot;&gt;RFC 3629&lt;/a&gt;가 제정되기 이전이어서 당시의 UTF-8 표준인 &lt;a href=&quot;https://www.ietf.org/rfc/rfc2279.txt&quot;&gt;RFC 2279&lt;/a&gt;를 바탕으로 개발이 진행되었다는 것입니다. &lt;br /&gt;
RFC 2279에서는 한 문자당 6바이트를 할당하는 방식이었고, MySQL 개발자들은 정확한 이유는 밝혀지지 않았지만 3바이트까지만으로 제한한 방식으로 ‘utf8’을 구현한 것 입니다. &lt;br /&gt;
이에 대한 내용을 분석한 &lt;a href=&quot;https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434&quot;&gt;다음 블로그&lt;/a&gt;에서 꽤 설득력 있는 원인을 찾을 수 있습니다.&lt;/p&gt;

&lt;p&gt;MySQL에서는 그 이후에도 별다른 공지 없이 UTF-8을 ‘utf8’로 사용하면 된다는 식으로 가이드를 제공해왔습니다. &lt;br /&gt;
따라서, 많은 개발자가 별다른 고민없이 이를 따르게 됐죠. 그러던 중, MySQL에서는 현재 표준에 맞게 4바이트를 모두 지원하는 인코딩 방식인 ‘utf8mb4’를 포함한 새로운 버전인 &lt;a href=&quot;https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html&quot;&gt;MySQL 5.5.3 버전&lt;/a&gt;을 2010년에 공식 발표하게 됩니다.&lt;br /&gt;
원래대로라면 ‘utf8’은 UTF-8을 완전히 지원하지 않기 때문에 이를 완전히 지원하는 ‘utf8mb4’를 사용하도록 충분한 가이드가 제공되었어야겠지만, MySQL은 그러질 않았어요.&lt;br /&gt;
그래서, 현재까지도 많은 개발자가 MySQL에서 UTF-8을 ‘utf8’로 잘못 인식해서 이모지와 같은 일부 문자들이 제대로 표시되지 않는 황당한 오류를 겪게 되는 것이죠. &lt;br /&gt;
자, 그렇다면 이제 기존의 utf8 인코딩을 utf8mb4로 바꾸는 방법을 알아보도록 하시죠.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;utf8mb4-설정하기&quot;&gt;utf8mb4 설정하기&lt;/h4&gt;

&lt;p&gt;우선, MySQL의 my.cnf 설정파일을 다음과 같이 수정합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ sudo vi /etc/my.cnf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt;
 
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysqld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;collation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4_unicode_ci&lt;/span&gt;
 
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
설정을 변경 한 후에는 다음과 같이 MySQL 서버를 재시작 시켜주세요.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ sudo service mysqld restart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런 다음, 다음과 같이 MySQL 터미널로 접속해서 변수들이 잘 변경되었는지 확인해 봅니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ mysql -uroot -p
mysql&amp;gt; SHOW VARIABLES LIKE ‘char%’; SHOW VARIABLES LIKE ‘collation%’;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/tonyji/utf8mb4/mysql_show_variables.png&quot; alt=&quot;MySQL Variables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 보이신다면 잘 변경된 것입니다. 이때, character_set_system은 ‘utf8’로 표시되는 것이 정상입니다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;업데이트를-위한-체크-사항&quot;&gt;업데이트를 위한 체크 사항&lt;/h4&gt;
&lt;p&gt;마지막으로, 기존 테이블을 업데이트하려면 다음과 같이 진행하면 됩니다.&lt;br /&gt;
utf8mb4는 utf8과 100% 호환되기 때문에 문자가 깨질 염려는 하지 않으셔도 됩니다. &lt;br /&gt;
다만, 3바이트였던 자릿수가 4바이트로 늘어나면서 칼럼의 최대 길이와 인덱스 키의 길이를 체크해야 합니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, TINYTEXT 칼럼은 255바이트까지 저장할 수 있는데,  utf8인 경우 3바이트 문자 기준 85개, utf8mb4의 경우 4바이트 문자 기준 63개를 저장할 수 있습니다.&lt;br /&gt;
따라서, 기존에 TINYTEXT 칼럼을 사용한다면 최대 입력 문자 수를 줄이거나 TEXT와 같은 필드로 칼럼 타입을 수정해야겠죠. &lt;br /&gt;
인덱스 키의 경우도 InnoDB 스토리지 엔진은 최대 767바이트까지만 인덱스를 저장할 수 있는데, 이를 3바이트(utf8인 경우)으로 나누면 255자, 4바이트(utf8mb4)로 나누면 191자까지만 인덱싱이 가능하다는 의미입니다. &lt;br /&gt;
이 경우, VARCHAR(255)로 정의된 필드에 인덱스가 걸려있었다면, 이 필드에 인덱스를 유지하기 위해서는 VARCHAR(191)로 수정해야 합니다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 체크가 완료되었다면 다음과 같이 테이블을 업데이트시켜 주시면 됩니다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mysql&amp;gt; use 데이터베이스명
mysql&amp;gt; ALTER TABLE 테이블명 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;참고로 파이썬에서 SQLAlchemy를 사용하실때 utf8mb4 사용을 위한 설정은 다음과 같습니다.&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ vi config.py
SQLALCHEMY_DATABASE_URI=mysql+mysqlconnector://{username}:{password}@{hostname}/{databasename}?charset=utf8mb4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 잘 따라오셨다면, 이제부터 이모지 문자가 잘 저장되는 것을 확인하실 수 있으실 겁니다.&lt;br /&gt;
프로그래밍의 세계에서 인코딩은 난해한 영역에 해당합니다. 따라서, 이 부분은 많이 공부하고 디테일하게 파헤쳐볼 만 하답니다.&lt;br /&gt;&lt;br /&gt;
더 깊은 내용을 공부하고 싶으신 분들을 위해 아래 참고 링크를 정리했습니다.&lt;br /&gt;
시간 되실 때 정독하시면 좋을 것 같네요.&lt;br /&gt;
감사합니다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;유니코드 설명(출처:위키백과)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8 설명(출처:위키백과)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/19187&quot;&gt;한글 인코딩의 이해(출처:네이버D2 기술블로그)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mathiasbynens.be/notes/mysql-utf8mb4&quot;&gt;How to support full Unicode in MySQL databases&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sun, 07 Jul 2019 00:00:00 +0900</pubDate>
        </item>
        
    </channel>
</rss>